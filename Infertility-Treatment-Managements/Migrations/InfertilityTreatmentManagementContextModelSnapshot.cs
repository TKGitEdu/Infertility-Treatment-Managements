// <auto-generated />
using System;
using Infertility_Treatment_Managements.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infertility_Treatment_Managements.Migrations
{
    [DbContext(typeof(InfertilityTreatmentManagementContext))]
    partial class InfertilityTreatmentManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.BlogPost", b =>
                {
                    b.Property<string>("BlogPostId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BlogPostID");

                    b.Property<string>("AuthorId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("AuthorID");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Summary")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("BlogPostId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BlogPosts", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Booking", b =>
                {
                    b.Property<string>("BookingId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BookingID");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateBooking")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DoctorId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DoctorID");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PatientId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("PatientID");

                    b.Property<string>("ServiceId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ServiceID");

                    b.Property<string>("SlotId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("SlotID");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("BookingId");

                    b.HasIndex("DoctorId")
                        .HasDatabaseName("IDX_Bookings_DoctorID");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("IDX_Bookings_PatientID");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("IDX_Bookings_ServiceID");

                    b.HasIndex("SlotId")
                        .HasDatabaseName("IDX_Bookings_SlotID");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.ContentPage", b =>
                {
                    b.Property<string>("ContentPageId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ContentPageID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CreatedByID");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedById")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("LastModifiedByID");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ContentPageId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("ContentPages", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Doctor", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("UserID");

                    b.HasKey("DoctorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Examination", b =>
                {
                    b.Property<string>("ExaminationId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ExaminationID");

                    b.Property<string>("BookingId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BookingID");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DoctorId")
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ExaminationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExaminationDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ExaminationId");

                    b.HasIndex("BookingId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Examinations", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("FeedbackID");

                    b.Property<string>("AdminResponse")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("BlogPostId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BlogPostID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FeedbackType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("PatientID");

                    b.Property<string>("RespondedById")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("RespondedByID");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ServiceID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("UserID");

                    b.HasKey("FeedbackId");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RespondedById");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Notification", b =>
                {
                    b.Property<string>("NotificationId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("NotificationID");

                    b.Property<string>("BookingId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BookingID");

                    b.Property<string>("DoctorId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DoctorID");

                    b.Property<bool?>("DoctorIsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MessageForDoctor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatientId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("PatientID");

                    b.Property<bool?>("PatientIsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TreatmentProcessId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("TreatmentProcessID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("NotificationId");

                    b.HasIndex("BookingId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentProcessId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Patient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("PatientID");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("BloodType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmergencyPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("UserID");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.PatientDetail", b =>
                {
                    b.Property<string>("PatientDetailId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("PatientDetailID");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PatientId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("PatientID");

                    b.Property<string>("TreatmentStatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("PatientDetailId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientDetails", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("PaymentID");

                    b.Property<string>("BookingId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BookingID");

                    b.Property<bool?>("Confirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Rating", b =>
                {
                    b.Property<string>("RatingId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("RatingID");

                    b.Property<string>("BookingId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BookingID");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DoctorId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DoctorID");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("PatientID");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RatingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ServiceID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RatingId");

                    b.HasIndex("BookingId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("RoleID");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Service", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ServiceID");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Slot", b =>
                {
                    b.Property<string>("SlotId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("SlotID");

                    b.Property<string>("EndTime")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("SlotName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StartTime")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("SlotId");

                    b.ToTable("Slots", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.TreatmentMedication", b =>
                {
                    b.Property<string>("MedicationId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("MedicationID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DrugType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TreatmentPlanId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("TreatmentPlanID");

                    b.HasKey("MedicationId");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("TreatmentMedications", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.TreatmentPlan", b =>
                {
                    b.Property<string>("TreatmentPlanId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("TreatmentPlanID");

                    b.Property<string>("DoctorId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DoctorID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GhiChu")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Giaidoan")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Method")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PatientDetailId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("PatientDetailID");

                    b.Property<string>("ServiceId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ServiceID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TreatmentDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("TreatmentPlanId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientDetailId");

                    b.HasIndex("ServiceId");

                    b.ToTable("TreatmentPlans", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.TreatmentProcess", b =>
                {
                    b.Property<string>("TreatmentProcessId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("TreatmentProcessID");

                    b.Property<string>("DoctorId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DoctorID");

                    b.Property<string>("PatientDetailId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("PatientDetailID");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TreatmentPlanId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("TreatmentPlanID");

                    b.HasKey("TreatmentProcessId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientDetailId");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("TreatmentProcesses", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.TreatmentStep", b =>
                {
                    b.Property<string>("TreatmentStepId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("TreatmentStepID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("integer");

                    b.Property<string>("TreatmentPlanId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("TreatmentPlanID");

                    b.HasKey("TreatmentStepId");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("TreatmentSteps", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("UserID");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("ResetPasswordExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("RoleID");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.BlogPost", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Booking", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.Doctor", "Doctor")
                        .WithMany("Bookings")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infertility_Treatment_Managements.Models.Patient", "Patient")
                        .WithMany("BookingFk")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infertility_Treatment_Managements.Models.Service", "Service")
                        .WithMany("BookingsFk")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infertility_Treatment_Managements.Models.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Service");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.ContentPage", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Infertility_Treatment_Managements.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Doctor", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("Infertility_Treatment_Managements.Models.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Examination", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.Booking", "Booking")
                        .WithMany("Examinations")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infertility_Treatment_Managements.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Booking");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Feedback", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.BlogPost", "BlogPost")
                        .WithMany("Feedbacks")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Infertility_Treatment_Managements.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Infertility_Treatment_Managements.Models.User", "RespondedBy")
                        .WithMany()
                        .HasForeignKey("RespondedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Infertility_Treatment_Managements.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Infertility_Treatment_Managements.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BlogPost");

                    b.Navigation("Patient");

                    b.Navigation("RespondedBy");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Notification", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infertility_Treatment_Managements.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infertility_Treatment_Managements.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infertility_Treatment_Managements.Models.TreatmentProcess", "TreatmentProcess")
                        .WithMany()
                        .HasForeignKey("TreatmentProcessId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Booking");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("TreatmentProcess");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Patient", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.PatientDetail", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.Patient", "Patient")
                        .WithMany("PatientDetails")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Payment", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("Infertility_Treatment_Managements.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Rating", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infertility_Treatment_Managements.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infertility_Treatment_Managements.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infertility_Treatment_Managements.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Booking");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.TreatmentMedication", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.TreatmentPlan", "TreatmentPlan")
                        .WithMany("TreatmentMedications")
                        .HasForeignKey("TreatmentPlanId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.TreatmentPlan", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.Doctor", "Doctor")
                        .WithMany("TreatmentPlans")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infertility_Treatment_Managements.Models.PatientDetail", "PatientDetail")
                        .WithMany("TreatmentPlansFk")
                        .HasForeignKey("PatientDetailId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infertility_Treatment_Managements.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Doctor");

                    b.Navigation("PatientDetail");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.TreatmentProcess", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infertility_Treatment_Managements.Models.PatientDetail", "PatientDetail")
                        .WithMany("TreatmentProcessesFk")
                        .HasForeignKey("PatientDetailId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infertility_Treatment_Managements.Models.TreatmentPlan", "TreatmentPlan")
                        .WithMany("TreatmentProcesses")
                        .HasForeignKey("TreatmentPlanId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Doctor");

                    b.Navigation("PatientDetail");

                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.TreatmentStep", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.TreatmentPlan", "TreatmentPlan")
                        .WithMany("TreatmentSteps")
                        .HasForeignKey("TreatmentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.User", b =>
                {
                    b.HasOne("Infertility_Treatment_Managements.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.BlogPost", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Booking", b =>
                {
                    b.Navigation("Examinations");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Doctor", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TreatmentPlans");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Patient", b =>
                {
                    b.Navigation("BookingFk");

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.PatientDetail", b =>
                {
                    b.Navigation("TreatmentPlansFk");

                    b.Navigation("TreatmentProcessesFk");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Service", b =>
                {
                    b.Navigation("BookingsFk");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.TreatmentPlan", b =>
                {
                    b.Navigation("TreatmentMedications");

                    b.Navigation("TreatmentProcesses");

                    b.Navigation("TreatmentSteps");
                });

            modelBuilder.Entity("Infertility_Treatment_Managements.Models.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
